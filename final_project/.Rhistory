mask_mandate = col_character(),
date = col_date(format = ""),
fine_enforced = col_logical(),
charge_enforced = col_logical(),
not_enforced = col_logical(),
mandate_start = col_date(format = ""),
mandate_start_2 = col_date(format = ""),
mandate_end = col_date(format = ""),
mandate_end_2 = col_date(format = "")
))
covid_data <- covid_data %>% filter(new_cases > 0)
state <- covid_data %>%
group_by(state) %>%
mutate(days = date - first(date) + 1)
# Aggregate at world level
us_data <- state %>%
group_by(date) %>%
summarize(new_cases=sum(new_cases),
cases=sum(cases),
new_deaths=sum(new_deaths),
deaths = sum(deaths)) %>%
mutate(days = date - first(date) + 1)
# Extract specific country: Alabama
alabama <- state %>%
filter(state == "Alabama")
new_york <- covid_data %>%
filter(state =="New York")
# cumulative cases by covid_data for select countries with counts in log10 scale
state_selection <- state %>%
filter(state==c("Alabama", "New York", "Texas", "California"))
ggplot(state_selection, aes(x=as.numeric(days), y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by State", x= "Days", y= "Daily cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(trans="log10")
# cumulative cases by covid_data for select countries with counts in log10 scale
state_selection <- state %>%
filter(state==c("Alabama", "New York", "Texas", "California"))
ggplot(state_selection, aes(x=as.numeric(days), y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by State", x= "Days", y= "Daily cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
state_selection <- state %>%
filter(state==c("Alabama", "New York", "Texas", "California"))
ggplot(state_selection, aes(x=as.numeric(date), y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by State", x= "Days", y= "Daily cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
state_selection <- state %>%
filter(state==c("Alabama", "New York", "Texas", "California"))
ggplot(state_selection, aes(x=date, y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by State", x= "Days", y= "Daily cases (log scale)") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
state_selection <- state %>%
filter(state==c("New York", "Texas"))
ggplot(state_selection, aes(x=date, y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases by State", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
View(covid_data)
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas")
ggplot(texas, aes(x=date, y=new_cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas")
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas")
library(lubridate)
day_2 <- lubridate::ymd('2020-04-15')
day_3 <- lubridate::ymd('2020-05-15')
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
View(texas)
texas[1,]
texas[1,]$mandate_start
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas")
library(lubridate)
day_2 <- lubridate::ymd(texas[1,]$mandate_start)
day_3 <- lubridate::ymd(texas[1,]$mandate_end)
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas") %>%
filter((date >= mandate_start - days(30)) && (date <= mandate_end + days(30)))
library(lubridate)
day_2 <- lubridate::ymd(texas[1,]$mandate_start)
day_3 <- lubridate::ymd(texas[1,]$mandate_end)
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas") %>%
filter((date >= mandate_start - days(30)) && (date <= mandate_end + days(30)))
library(lubridate)
day_2 <- lubridate::ymd(texas[1,]$mandate_start)
day_3 <- lubridate::ymd(texas[1,]$mandate_end)
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
geom_smooth(method = "lm", se = FALSE) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas") %>%
filter((date >= mandate_start - days(30)) && (date <= mandate_end + days(30)))
library(lubridate)
day_2 <- lubridate::ymd(texas[1,]$mandate_start)
day_3 <- lubridate::ymd(texas[1,]$mandate_end)
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
geom_ribbon( aes(ymin = lwr, ymax = upr, fill = grp, color = NULL), alpha = .15) +
geom_line( aes(y = fit), size = 1) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
# cumulative cases by covid_data for select countries with counts in log10 scale
texas <- state %>%
filter(state == "Texas") %>%
filter((date >= mandate_start - days(30)) && (date <= mandate_end + days(30)))
fitlm = lm(cases ~ date, data = texas)
library(lubridate)
day_2 <- lubridate::ymd(texas[1,]$mandate_start)
day_3 <- lubridate::ymd(texas[1,]$mandate_end)
current_day <- lubridate::today()
ggplot(texas, aes(x=date, y=cases, colour=state)) +
geom_line(size=1) +
geom_smooth(method = "lm", se = FALSE) +
annotate(geom = "vline",
x = c(day_2, day_3),
xintercept = c(day_2, day_3),
linetype = c("dashed", "solid")) +
theme_classic() +
labs(title = "Covid-19 Cases in Texas", x= "Days", y= "Daily cases") +
theme(plot.title = element_text(hjust = 0.5))
fitlm
shiny::runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp()
renderer = file_renderer("images", prefix = "death_plot_", overwrite = TRUE))
?read_csv
runApp()
runApp()
runApp()
covid_data <- read_csv(here('data',
'processed_data',
'cases_data_plus_mandates-2.csv'),
col_types = list(
X1 = col_double(),
X = col_double(),
state = col_character(),
cases = col_double(),
deaths = col_double(),
new_cases = col_double(),
new_deaths = col_double(),
mask_mandate = col_character(),
date = col_date(format = ""),
fine_enforced = col_logical(),
charge_enforced = col_logical(),
not_enforced = col_logical(),
mandate_start = col_date(format = ""),
mandate_start_2 = col_date(format = ""),
mandate_end = col_date(format = ""),
mandate_end_2 = col_date(format = "")
))
covid_data <- read_csv(here('data',
'processed_data',
'cases_data_plus_mandates-2.csv'),
col_types = list(
state = col_character(),
cases = col_double(),
deaths = col_double(),
new_cases = col_double(),
new_deaths = col_double(),
mask_mandate = col_character(),
date = col_date(format = ""),
fine_enforced = col_logical(),
charge_enforced = col_logical(),
not_enforced = col_logical(),
mandate_start = col_date(format = ""),
mandate_start_2 = col_date(format = ""),
mandate_end = col_date(format = ""),
mandate_end_2 = col_date(format = "")
))
covid_data <- covid_data %>% filter(new_cases > 0) %>%
mutate(weekday = weekdays(date)) %>%
filter(weekday == "Tuesday")
states <- covid_data %>% group_by(state) %>% select(state)
View(states)
runApp()
runApp()
View(states)
states <- covid_data %>% group_by(state) %>% select(state)%>% distinct(state)
runApp()
View(covid_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tsdata <- ts(new_york, frequency = 12)
ddata <- decompose(tsdata, "multiplicative")
?decompose
tsdata
View(tsdata)
new_york <- new_york %>% select(-c(mandate_start_2, mandate_end, mandate_end_2))
tsdata <- ts(new_york, frequency = 12)
ddata <- decompose(tsdata, "multiplicative")
plot(ddata)
plot(ddata$trend)
runApp()
runApp()
plot.ts(new_york)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
data_with_mandates <- read.csv(here('data',
'processed_data',
'weekly_cases_data_plus_mandates-3.csv'))
# data_with_mandates %<>%
#   mutate(date = as.Date(date)) %>%
#   arrange(date) %>%
#   group_by(state) %>%
#   mutate(cases_proyected = if_else(weeks > 2, sqrt(lag(cases)/lag(cases,2))*lag(cases),0),
#          deaths_proyected = if_else(weeks > 2, sqrt(lag(deaths)/lag(deaths,2))*lag(deaths),0),
#          new_cases_proyected = cases_proyected - lag(cases_proyected),
#          new_deaths_proyected = deaths_proyected - lag(deaths_proyected)
#   )
data_with_mandates %<>%
mutate(date = as.Date(date)) %>%
arrange(date) %>%
group_by(state) %>%
mutate(cases_proyected = if_else(weeks > 2, (lag(cases) - lag(cases,2))/lag(cases,2),0),
deaths_proyected = if_else(weeks > 2, sqrt(lag(deaths)-lag(deaths,2))/lag(deaths,2),0),
new_cases_proyected = cases_proyected - lag(cases_proyected),
new_deaths_proyected = deaths_proyected - lag(deaths_proyected)
)
write.csv(data_with_mandates, here('data',
'processed_data',
'weekly_cases_data_plus_mandates-4.csv'))
runApp()
View(data_with_mandates)
View(data_with_mandates)
data_with_mandates <- read.csv(here('data',
'processed_data',
'weekly_cases_data_plus_mandates-3.csv'))
# data_with_mandates %<>%
#   mutate(date = as.Date(date)) %>%
#   arrange(date) %>%
#   group_by(state) %>%
#   mutate(cases_proyected = if_else(weeks > 2, sqrt(lag(cases)/lag(cases,2))*lag(cases),0),
#          deaths_proyected = if_else(weeks > 2, sqrt(lag(deaths)/lag(deaths,2))*lag(deaths),0),
#          new_cases_proyected = cases_proyected - lag(cases_proyected),
#          new_deaths_proyected = deaths_proyected - lag(deaths_proyected)
#   )
data_with_mandates %<>%
mutate(date = as.Date(date)) %>%
arrange(date) %>%
group_by(state) %>%
mutate(cases_proyected = if_else(weeks > 2, (lag(cases) - lag(cases,2))/lag(cases,2),0),
deaths_proyected = if_else(weeks > 2, (lag(deaths)-lag(deaths,2))/lag(deaths,2),0),
new_cases_proyected = cases_proyected - lag(cases_proyected),
new_deaths_proyected = deaths_proyected - lag(deaths_proyected)
)
write.csv(data_with_mandates, here('data',
'processed_data',
'weekly_cases_data_plus_mandates-4.csv'))
runApp()
data_with_mandates <- read.csv(here('data',
'processed_data',
'weekly_cases_data_plus_mandates-3.csv'))
data_with_mandates %<>%
mutate(date = as.Date(date)) %>%
arrange(date) %>%
group_by(state) %>%
mutate(cases_proyected = if_else(weeks > 2, sqrt(lag(cases)/lag(cases,2))*lag(cases),0),
deaths_proyected = if_else(weeks > 2, sqrt(lag(deaths)/lag(deaths,2))*lag(deaths),0),
new_cases_proyected = cases_proyected - lag(cases_proyected),
new_deaths_proyected = deaths_proyected - lag(deaths_proyected)
)
write.csv(data_with_mandates, here('data',
'processed_data',
'weekly_cases_data_plus_mandates-4.csv'))
runApp()
ifelse
?ifelse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_with_mandates)
data_with_mandates[2,]["date"]
runApp()
runApp()
val <- "Cumulative Cases"
label <- gsub("Cumulative ","", va;)
label <- gsub("Cumulative ","", val)
label
row_label <- tolower(gsub(" ","_", label))
data_with_mandates[2,][row_label]
state_data <- data_with_mandates %>%
filter(state == "Alabama")
before_mandate_start <- state_data %>%
filter(((date >= mandate_start - days(14)) &
(date <= mandate_start))) %>%
mutate(cases_rate = (cases - lag(cases))/lag(cases),
deaths_rate = (deaths - lag(deaths))/lag(deaths),
new_cases_rate = (new_cases - lag(new_cases))/lag(new_cases),
new_deaths_rate = (new_deaths - lag(new_deaths))/lag(new_deaths)) %>%
select(c(state, mandate_start, mandate_end,cases,
deaths,
new_cases,
new_deaths,
cases_rate,
deaths_rate,
new_cases_rate,
new_deaths_rate))
state_data <- state_data %>% mutate(date = as.Date(date), mandate_start = as.Date(mandate_start), mandate_end = as.Date(mandate_end))
before_mandate_start <- state_data %>%
filter(((date >= mandate_start - days(14)) &
(date <= mandate_start))) %>%
mutate(cases_rate = (cases - lag(cases))/lag(cases),
deaths_rate = (deaths - lag(deaths))/lag(deaths),
new_cases_rate = (new_cases - lag(new_cases))/lag(new_cases),
new_deaths_rate = (new_deaths - lag(new_deaths))/lag(new_deaths)) %>%
select(c(state, mandate_start, mandate_end,cases,
deaths,
new_cases,
new_deaths,
cases_rate,
deaths_rate,
new_cases_rate,
new_deaths_rate))
new_york <- new_york %>% add_row(Data=paste(label, " before mandate start"),
Value=as.character(before_mandate_start[2,][row_label]),
RateOfChange =scales::percent(before_mandate_start[2,][paste(row_label,"_rate")])) %>%
add_row(Data=paste(label, " after mandate start"),
Value=as.character(after_mandate_start[2,][row_label]),
RateOfChange =scales::percent(after_mandate_start[2,][paste(row_label,"_rate")]))
new_york <- data.frame(Data=character(), Value=character(), RateOfChange = character())
new_york <- new_york %>% add_row(Data=paste(label, " before mandate start"),
Value=as.character(before_mandate_start[2,][row_label]),
RateOfChange =scales::percent(before_mandate_start[2,][paste(row_label,"_rate")])) %>%
add_row(Data=paste(label, " after mandate start"),
Value=as.character(after_mandate_start[2,][row_label]),
RateOfChange =scales::percent(after_mandate_start[2,][paste(row_label,"_rate")]))
runApp()
new_york <- new_york %>% add_row(Data=paste(label, " before mandate start"),
Value=as.character(before_mandate_start[2,][row_label]),
RateOfChange =scales::percent(before_mandate_start[2,][paste(row_label,"_rate", sep="")])) %>%
add_row(Data=paste(label, " after mandate start"),
Value=as.character(after_mandate_start[2,][row_label]),
RateOfChange =scales::percent(after_mandate_start[2,][paste(row_label,"_rate", sep="")]))
runApp()
runApp()
runApp()
runApp()
row_label
rate_label <- paste(row_label, "rate", sep="_")
View(new_york)
View(state_data)
after_mandate_start <- state_data %>% filter(((date >= mandate_start) &
(date <= mandate_start + days(14))))%>%
mutate(cases_rate = (cases - lag(cases))/lag(cases),
deaths_rate = (deaths - lag(deaths))/lag(deaths),
new_cases_rate = (new_cases - lag(new_cases))/lag(new_cases),
new_deaths_rate = (new_deaths - lag(new_deaths))/lag(new_deaths)) %>%
select(c(state, mandate_start, mandate_end,cases,
deaths,
new_cases,
new_deaths,
cases_rate,
deaths_rate,
new_cases_rate,
new_deaths_rate))
scales::percent(after_mandate_start[2,]$cases_rate))
scales::percent(after_mandate_start[2,]$cases_rate)
scales::percent(after_mandate_start[2,]$[rate_label])
scales::percent(after_mandate_start[2,][rate_label])
scales::percent(after_mandate_start[2,][rate_label][0])
scales::percent(after_mandate_start[2,][rate_label][1])
scales::percent(after_mandate_start[2,][rate_label,])
scales::percent(after_mandate_start[2,][rate_label])
after_mandate_start[2,][rate_label]
after_mandate_start[2,]rate_label
after_mandate_start[2,]$rate_label
after_mandate_start[2,rate_label]
scales::percent(after_mandate_start[2,rate_label])
scales::percent(after_mandate_start[2,rate_label].first)
scales::percent(after_mandate_start[2,rate_label])
scales::percent(first(after_mandate_start[2,rate_label]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='georgecd',
token='038ACC7D884747542DA9A24FEEFC0890',
secret='+Q3hgzpHkA+OOjCQ+JDH5gZ0TlrK/5GGLeG8mTX8')
shiny::runApp()
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
runApp('CovidTracker')
